name: Release

on:
    push:
        tags:
            - "v*.*.*" # Triggers on version tags like v1.0.0
    workflow_dispatch:
        inputs:
            version:
                description: "Release version"
                required: true
                default: "v1.0.0"

jobs:
    create-release:
        runs-on: ubuntu-latest
        outputs:
            release_id: ${{ steps.create_release.outputs.id }}
            upload_url: ${{ steps.create_release.outputs.upload_url }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Fetch all history for changelog generation

            - name: Generate changelog
              id: changelog
              run: |
                  # Generate changelog from git commits
                  echo "## Changes" > CHANGELOG.md
                  if [ -n "$(git tag --sort=-version:refname | head -n 2 | tail -n 1)" ]; then
                    PREV_TAG=$(git tag --sort=-version:refname | head -n 2 | tail -n 1)
                    git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" >> CHANGELOG.md
                  else
                    git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
                  fi

                  echo "changelog<<EOF" >> $GITHUB_OUTPUT
                  cat CHANGELOG.md >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.event.inputs.version || github.ref_name }}
                  release_name: Release ${{ github.event.inputs.version || github.ref_name }}
                  body: ${{ steps.changelog.outputs.changelog }}
                  draft: false
                  prerelease: false

    build-and-upload-backend:
        needs: create-release
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.13"

            - name: Build backend package
              run: |
                  cd phunparty-backend
                  python -m pip install --upgrade pip build
                  python -m build

            - name: Create backend archive
              run: |
                  cd phunparty-backend
                  tar -czf ../phunparty-backend-${{ github.event.inputs.version || github.ref_name }}.tar.gz .

            - name: Upload backend archive
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.create-release.outputs.upload_url }}
                  asset_path: ./phunparty-backend-${{ github.event.inputs.version || github.ref_name }}.tar.gz
                  asset_name: phunparty-backend-${{ github.event.inputs.version || github.ref_name }}.tar.gz
                  asset_content_type: application/gzip

    deploy-production:
        needs: [create-release, build-and-upload-backend]
        runs-on: ubuntu-latest
        if: success()

        steps:
            - name: Deploy to production
              run: |
                  echo "Deploying PhunParty ${{ github.event.inputs.version || github.ref_name }} to production"
                  # Add your production deployment commands here
                  # This could include:
                  # - Deploying backend to production server
                  # - Deploying web frontend to hosting platform
                  # - Updating production database
                  # - Notifying team of successful deployment

            - name: Notify deployment success
              uses: actions/github-script@v6
              with:
                  script: |
                      await github.rest.issues.create({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        title: `PhunParty ${{ github.event.inputs.version || github.ref_name }} deployed to production`,
                        body: `ðŸŽ‰ PhunParty ${{ github.event.inputs.version || github.ref_name }} has been successfully deployed to production!
                        
                        **Deployment Details:**
                        - Backend: âœ… Deployed
                        - Release: âœ… Created
                        
                        **Next Steps:**
                        - Monitor application performance
                        - Verify all features are working correctly
                        - Update documentation if needed`,
                        labels: ['deployment', 'production']
                      });
