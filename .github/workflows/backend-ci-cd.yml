name: Backend CI/CD

on:
    push:
        branches: [main, develop]
        paths: ["phunparty-backend/**", ".github/workflows/backend-ci-cd.yml"]
    pull_request:
        branches: [main]
        paths: ["phunparty-backend/**", ".github/workflows/backend-ci-cd.yml"]

jobs:
    test:
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:13
                env:
                    POSTGRES_PASSWORD: test_password
                    POSTGRES_USER: test_user
                    POSTGRES_DB: test_phunparty
                ports:
                    - 5432:5432
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.13"
                  cache: "pip"
                  cache-dependency-path: "phunparty-backend/requirements.txt"

            - name: Install dependencies
              run: |
                  cd phunparty-backend
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install pytest pytest-asyncio httpx pytest-cov flake8 black isort

            - name: Lint with flake8
              run: |
                  cd phunparty-backend
                  flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                  flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

            - name: Check code formatting with black
              run: |
                  cd phunparty-backend
                  black --check --diff .

            - name: Check import sorting with isort
              run: |
                  cd phunparty-backend
                  isort --check-only --profile black --diff .

            - name: Run tests with coverage
              env:
                  DB_HOST: localhost
                  DB_PORT: 5432
                  DB_USER: test_user
                  DB_PASSWORD: test_password
                  DB_NAME: test_phunparty
                  SECRET_KEY: test_secret_key_for_testing_only
                  ALGORITHM: HS256
                  ACCESS_TOKEN_EXPIRE_MINUTES: 30
              run: |
                  cd phunparty-backend
                  pytest --cov=app --cov-report=xml --cov-report=html

            - name: Upload coverage reports
              uses: codecov/codecov-action@v3
              with:
                  file: ./phunparty-backend/coverage.xml
                  flags: backend
                  name: backend-coverage
                  fail_ci_if_error: false

    deploy-staging:
        needs: test
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Deploy to staging
              run: |
                  echo "Deploy to staging environment"
                  # Add your staging deployment commands here
                  # Example: deploy to Render, Heroku, or other staging environment

    deploy-production:
        needs: test
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Deploy to production
              run: |
                  echo "Deploy to production environment"
                  # Add your production deployment commands here
                  # Example: deploy to production server or cloud platform
